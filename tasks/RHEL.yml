---
- name: Configure RHEL for PCI
  block:
    - name: ensure sshd only accepts key-based auth
      lineinfile:
        dest: /etc/ssh/sshd_config
        state: present
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: "yes"
      with_items:
        - regexp: '^(#)?PubkeyAuthentication (yes|no)$'
          line: "PubkeyAuthentication {{ sshd['PubkeyAuthentication'] | default('yes') }}"
        - regexp: '^(#)?ChallengeResponseAuthentication (yes|no)$'
          line: "ChallengeResponseAuthentication {{ sshd['ChallengeResponseAuthentication'] | default('no') }}"
        - regexp: '^(#)?PasswordAuthentication (yes|no)$'
          line: "PasswordAuthentication {{ sshd['PasswordAuthentication'] | default('no') }}"
        - regexp: '^(#)?UsePAM (yes|no)$'
          line: "UsePAM {{ sshd['UsePAM'] | default('yes') }}"
        - regexp: '^(#)?ClientAliveInterval ([0-9])+$'
          line: "ClientAliveInterval {{ sshd['ClientAliveInterval'] | default(300) }}"
        - regexp: '^(#)?ClientAliveCountMax ([0-9])+$'
          line: "ClientAliveCountMax {{ sshd['ClientAliveCountMax'] | default(3) }}"
      notify:
        - restart sshd

    - name: ensure password expiration is set in login.defs
      lineinfile:
        dest: "{{ user_login_defs_path }}"
        state: present
        regexp: ^PASS_MAX_DAYS\s+\d+$
        line: "PASS_MAX_DAYS {{ user_pass_max_days }}"
        backup: "yes"

    - name: set accounts to auto lock if they are inactive for a number of days
      lineinfile:
        dest: "{{ user_useradd_path }}"
        state: present
        regexp: ^INACTIVE=
        line: "INACTIVE={{ user_inactive_days_pci }}"
        backup: "yes"
  when: "'pci' in group_names"

- name: Configure Users in RHEL
  block:
    - name: create users
      user:
        name: "{{ item.name }}"
        generate_ssh_key: "{{ user_gen_sshkey }}"
        groups: "{{ item.groups | default()}}"
      with_items: "{{ raxusers }}"

    # Whether to remove all other non-specified keys from the authorized_keys
    # file. Multiple keys can be specified in a single key string value by
    # separating them by newlines.
    # This option is not loop aware, so if you use with_ , it will be
    # exclusive per iteration of the loop, if you want multiple keys in the
    # file you need to pass them all to key in a single batch as mentioned
    # above.

    - name: authorized_keys for users
      authorized_key:
        user: "{{ item.name }}"
        key: "{{ item.ssh_key }}"
        exclusive: "{{ user_sshkey_exclusive }}"
      when: item.ssh_key is defined
      with_items: "{{ raxusers }}"

    - name: initialize raxsudoers list
      set_fact:
        raxsudoers: "{{ raxsudoers|default([]) }} + [{{ item }}]"
      when: (item.sudoers is defined and item.sudoers) and item.sudo_opts is defined
      with_items: "{{ raxusers }}"

    - name: set default sudo_opts if not defined
      set_fact:
        raxsudoers: "{{ raxsudoers|default([]) }} + [{{ item|combine({'sudo_opts':{}}) }}]"
      when: (item.sudoers is defined and item.sudoers) and item.sudo_opts is undefined
      with_items: "{{ raxusers }}"

    - name: create user sudoers file
      template:
        src: templates/sudoers-user.j2
        dest: "/etc/sudoers.d/99-{{ item.name }}"
        validate: '/usr/sbin/visudo -cf %s'
      when: (item.sudoers is defined and item.sudoers)
      with_items: "{{ raxsudoers }}"

  when: raxusers|length > 0
